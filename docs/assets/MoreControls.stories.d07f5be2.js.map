{"version":3,"file":"MoreControls.stories.d07f5be2.js","sources":["../../src/stories/MoreControls.stories.jsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport Scene from \"../components/Scene\";\nimport { SceneSlice } from \"../components\";\nimport { Quaternion, Euler, Vector3 } from \"three\";\nimport { range, clamp, toNumber, min } from \"lodash\";\nimport { subscribeWithSelector } from \"zustand/middleware\";\nimport { MeshLookupTable } from \"./meshes/MeshLookup\";\nimport { immer } from \"zustand/middleware/immer\";\nimport { create } from \"zustand\";\nimport { shallow } from \"zustand/shallow\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport ErrorFallback from \"./ErrorFallback\";\nexport default {\n  title: \"More Controls\",\n  component: Scene\n};\nconst slice = (set, get, api) => ({\n  ...SceneSlice(set, get),\n  scalarValue: 1,\n  rangeValue: [0.5, 1.5],\n  range: [0, 2],\n  setScalarValue: newScalarValue => set({\n    scalarValue: newScalarValue\n  }),\n  setRangeValue: newRangeValue => set({\n    rangeValue: newRangeValue\n  }),\n  setRange: newRange => set({\n    range: newRange\n  }),\n  onMove: (id, source, worldTransform, localTransform) => set(state => {\n    if ([\"scalarInputIndicator\", \"bottomRangeInputIndicator\", \"topRangeInputIndicator\"].includes(id)) {\n      // Special logic for handling the scalar and range inputs;\n      // First, update the z-position of the relevant indicator;\n      const value = clamp((10 * localTransform.position.z + 0.5) * (state.range[1] - state.range[0]) + state.range[0], state.range[0], state.range[1]);\n      if (id === \"scalarInputIndicator\") {\n        state.scalarValue = value;\n        // Update Visuals\n        state.items[id].position.z = (value - state.range[0]) / (state.range[1] - state.range[0]) * 0.1 - 0.05;\n        // Update the text above\n        state.texts.inputText.value = Math.round(value * 100) / 100;\n      } else {\n        console.log(\"handling range\");\n        // Be robust to whether the dragged value is greater than or less than the various endpoints;\n        if (id == \"bottomRangeInputIndicator\" && state.range[1] >= value) {\n          // The bottom input was moved and remains lower than the upper value. Simply set the lower value to the new one.\n          state.rangeValue[0] = value;\n        } else if (id == \"bottomRangeInputIndicator\" && state.range[1] < value) {\n          // The bottom input was moved and is now greater than the upper value. Set the new top to the new value, and set the previous top to be the new lower value.\n          state.rangeValue[0] = state.rangeValue[1];\n          state.rangeValue[1] = value;\n        } else if (id == \"topRangeInputIndicator\" && state.range[0] <= value) {\n          // The top input was moved and remains greater than the lower value. Simply set the upper value to the new one.\n          state.rangeValue[1] = value;\n        } else if (id == \"topRangeInputIndicator\" && state.range[0] > value) {\n          // The top input was moved and is now less than the lower value. Set the new bottom to the new value, and set the previous bottom to be the new upper value.\n          state.rangeValue[1] = state.rangeValue[0];\n          state.rangeValue[0] = value;\n        }\n        // Update visuals\n        state.items.topRangeInputIndicator.position.z = (state.rangeValue[1] - state.range[0]) / (state.range[1] - state.range[0]) * 0.1 - 0.05;\n        state.items.bottomRangeInputIndicator.position.z = (state.rangeValue[0] - state.range[0]) / (state.range[1] - state.range[0]) * 0.1 - 0.05;\n        state.items.rangeInputRange.position = {\n          x: 0,\n          y: 0.05,\n          z: (state.items.topRangeInputIndicator.position.z + state.items.bottomRangeInputIndicator.position.z) / 2\n        };\n        state.items.rangeInputRange.shapeParams.height = (state.rangeValue[1] - state.rangeValue[0]) / (state.range[1] - state.range[0]) * 0.09;\n        // Update the text above\n        state.texts.inputRangeText.value = `${Math.round(state.rangeValue[0] * 100) / 100}, ${Math.round(state.rangeValue[1] * 100) / 100}`;\n      }\n    } else {\n      // Handle everything else\n      state[source][id].position = {\n        ...localTransform.position\n      };\n      state[source][id].rotation = localTransform.quaternion;\n      state[source][id].rotation.x = localTransform.quaternion.x;\n      state[source][id].rotation.y = localTransform.quaternion.y;\n      state[source][id].rotation.z = localTransform.quaternion.z;\n      state[source][id].rotation.w = localTransform.quaternion.w;\n      state[source][id].scale = {\n        ...localTransform.scale\n      };\n    }\n  })\n});\nconst useStore = create(immer(subscribeWithSelector(slice)));\n// console.log('starting',useStore.getState())\n\nconst Template = args => {\n  const {\n    tfs,\n    lines,\n    texts,\n    points,\n    angle,\n    length,\n    rangeInputVal,\n    scalarInputVal,\n    range,\n    ...otherArgs\n  } = args;\n  const [play, pause, reset] = useStore(state => [state.play, state.pause, state.reset]);\n\n  // Define changeable versions of the two range inputs\n  const [scalarValue, setScalarValue] = useStore(state => [state.scalarValue, state.setScalarValue], shallow);\n  const [rangeValue, setRangeValue] = useStore(state => [state.rangeValue, state.setRangeValue], shallow);\n  const setRange = useStore(state => state.setRange, shallow);\n  useEffect(() => {\n    setScalarValue(scalarInputVal);\n    setRangeValue(rangeInputVal);\n    setRange(range);\n    const hulls = {\n      angleFeedback: getHullMesh(length, angle)\n    };\n    const items = {\n      ...getScalarInputItems(range, scalarValue),\n      ...getRangeInputItems(range, rangeValue)\n    };\n    useStore.setState({\n      tfs,\n      items,\n      hulls,\n      lines,\n      texts,\n      points\n    });\n  }, [tfs, lines, texts, points, angle, length, range, scalarInputVal, rangeInputVal]);\n  return <ErrorBoundary FallbackComponent={ErrorFallback}>\n      <div style={{\n      height: \"calc(100vh - 3rem)\",\n      width: \"calc(100vw - 2rem)\"\n    }}>\n        <Scene {...otherArgs} store={useStore} meshLookup={MeshLookupTable} />\n        <div style={{\n        textAlign: \"center\"\n      }}>\n          <button onClick={() => play()}>Play</button>\n          <button onClick={() => play(0.5)}>Play (0.5x)</button>\n          <button onClick={() => play(2)}>Play (2x)</button>\n          <button onClick={() => pause()}>Pause</button>\n          <button onClick={() => reset(0)}>Reset</button>\n          <button onClick={() => reset(Math.PI / 2)}>Reset (0.25)</button>\n          <button onClick={() => reset(Math.PI)}>Reset (0.5)</button>\n          <button onClick={() => reset(3 * Math.PI / 2)}>Reset (0.75)</button>\n        </div>\n      </div>\n    </ErrorBoundary>;\n};\nconst getHullMesh = (length, angle) => {\n  const origin = new Quaternion();\n  const eulerA = new Euler(0, Math.PI / 2, 0);\n  const qA = origin.clone().rotateTowards(new Quaternion().setFromEuler(eulerA), angle);\n  const qB = origin.clone().rotateTowards(new Quaternion().setFromEuler(eulerA), angle / 2);\n  const centralVec = new Vector3(0, 0, length);\n  const vecA = centralVec.clone().applyQuaternion(qA);\n  const vecB = centralVec.clone().applyQuaternion(qB);\n  const points = [{\n    x: 0,\n    y: 0,\n    z: 0\n  }, {\n    x: centralVec.x,\n    y: centralVec.y,\n    z: centralVec.z\n  }, {\n    x: vecA.x,\n    y: vecA.y,\n    z: vecA.z\n  }, ...range(0, 2 * Math.PI, Math.PI / 6).map(a => {\n    return {\n      x: vecA.x * Math.sin(a),\n      y: vecA.x * Math.cos(a),\n      z: vecA.z\n    };\n  }), ...range(0, 2 * Math.PI, Math.PI / 6).map(a => {\n    return {\n      x: vecB.x * Math.sin(a),\n      y: vecB.x * Math.cos(a),\n      z: vecB.z\n    };\n  })];\n  return {\n    frame: \"world\",\n    name: \"Robot Space Usage\",\n    vertices: points,\n    color: {\n      r: 10,\n      g: 200,\n      b: 235,\n      a: 0.7\n    },\n    wireframe: false\n  };\n};\nconst getScalarInputItems = (rangeBounds, value, offset) => {\n  const z = (value - rangeBounds[0]) / (rangeBounds[1] - rangeBounds[0]) * 0.1 - 0.05;\n  return {\n    scalarInputHousing: {\n      shape: \"capsule\",\n      name: \"Input Housing\",\n      frame: \"movingFrame1\",\n      position: {\n        x: 0,\n        y: offset || 0.05,\n        z: 0\n      },\n      rotation: {\n        w: 1,\n        x: 0,\n        y: 0,\n        z: 0\n      },\n      color: {\n        r: 100,\n        g: 100,\n        b: 100,\n        a: 0.3\n      },\n      scale: {\n        x: 1,\n        y: 1,\n        z: 1\n      },\n      shapeParams: {\n        height: 0.1,\n        radius: 0.02\n      },\n      highlighted: false\n    },\n    scalarInputIndicator: {\n      shape: \"sphere\",\n      name: \"Input Indicator\",\n      frame: \"movingFrame1\",\n      position: {\n        x: 0,\n        y: offset || 0.05,\n        z\n      },\n      rotation: {\n        w: 1,\n        x: 0,\n        y: 0,\n        z: 0\n      },\n      color: {\n        r: 0,\n        g: 0,\n        b: 255,\n        a: 1\n      },\n      scale: {\n        x: 0.03,\n        y: 0.03,\n        z: 0.03\n      },\n      transformMode: \"translate-z\",\n      highlighted: false\n    }\n  };\n};\nconst getRangeInputItems = (rangeBounds, valueRange, offset) => {\n  const zSphereTop = (valueRange[1] - rangeBounds[0]) / (rangeBounds[1] - rangeBounds[0]) * 0.1 - 0.05;\n  const zSphereBottom = (valueRange[0] - rangeBounds[0]) / (rangeBounds[1] - rangeBounds[0]) * 0.1 - 0.05;\n  const rangeHeight = (valueRange[1] - valueRange[0]) / (rangeBounds[1] - rangeBounds[0]) * 0.09;\n  return {\n    rangeInputHousing: {\n      shape: \"capsule\",\n      name: \"Input Housing\",\n      frame: \"movingFrame2\",\n      position: {\n        x: 0,\n        y: offset || 0.05,\n        z: 0\n      },\n      rotation: {\n        w: 1,\n        x: 0,\n        y: 0,\n        z: 0\n      },\n      color: {\n        r: 100,\n        g: 100,\n        b: 100,\n        a: 0.3\n      },\n      scale: {\n        x: 1,\n        y: 1,\n        z: 1\n      },\n      shapeParams: {\n        height: 0.1,\n        radius: 0.02\n      },\n      highlighted: false\n    },\n    rangeInputRange: {\n      shape: \"capsule\",\n      name: \"Input Housing\",\n      frame: \"movingFrame2\",\n      position: {\n        x: 0,\n        y: offset || 0.05,\n        z: (zSphereTop + zSphereBottom) / 2\n      },\n      rotation: {\n        w: 1,\n        x: 0,\n        y: 0,\n        z: 0\n      },\n      color: {\n        r: 0,\n        g: 0,\n        b: 255,\n        a: 1\n      },\n      scale: {\n        x: 1,\n        y: 1,\n        z: 1\n      },\n      shapeParams: {\n        height: rangeHeight,\n        radius: 0.015\n      },\n      highlighted: false\n    },\n    bottomRangeInputIndicator: {\n      shape: \"sphere\",\n      name: \"Input Indicator Bottom\",\n      frame: \"movingFrame2\",\n      position: {\n        x: 0,\n        y: offset || 0.05,\n        z: zSphereBottom\n      },\n      rotation: {\n        w: 1,\n        x: 0,\n        y: 0,\n        z: 0\n      },\n      color: {\n        r: 0,\n        g: 0,\n        b: 255,\n        a: 1\n      },\n      scale: {\n        x: 0.03,\n        y: 0.03,\n        z: 0.03\n      },\n      transformMode: \"translate-z\",\n      highlighted: false\n    },\n    topRangeInputIndicator: {\n      shape: \"sphere\",\n      name: \"Input Indicator Top\",\n      frame: \"movingFrame2\",\n      position: {\n        x: 0,\n        y: offset || 0.05,\n        z: zSphereTop\n      },\n      rotation: {\n        w: 1,\n        x: 0,\n        y: 0,\n        z: 0\n      },\n      color: {\n        r: 0,\n        g: 0,\n        b: 255,\n        a: 1\n      },\n      scale: {\n        x: 0.03,\n        y: 0.03,\n        z: 0.03\n      },\n      transformMode: \"translate-z\",\n      highlighted: false\n    }\n  };\n};\nexport const MoreControls = Template.bind({});\nMoreControls.args = {\n  tfs: {\n    movingFrame1: {\n      frame: \"world\",\n      position: {\n        x: time => Math.cos(time / 5000),\n        y: time => Math.sin(time / 5000),\n        z: 0.5\n      },\n      rotation: {\n        w: 1,\n        x: 0,\n        y: 0,\n        z: 0\n      },\n      scale: {\n        x: 1,\n        y: 1,\n        z: 1\n      }\n    },\n    movingFrame2: {\n      frame: \"world\",\n      position: {\n        x: time => Math.sin(time / 5000),\n        y: time => Math.cos(time / 5000),\n        z: 0.5\n      },\n      rotation: {\n        w: 1,\n        x: 0,\n        y: 0,\n        z: 0\n      },\n      scale: {\n        x: 1,\n        y: 1,\n        z: 1\n      }\n    }\n  },\n  lines: {},\n  texts: {\n    inputText: {\n      value: \"0.5\",\n      frame: \"movingFrame1\",\n      position: {\n        x: 0,\n        y: 0,\n        z: 0.25\n      },\n      color: {\n        r: 0,\n        g: 0,\n        b: 255,\n        a: 1\n      }\n    },\n    inputRangeText: {\n      value: \"0.5, 1.5\",\n      frame: \"movingFrame2\",\n      position: {\n        x: 0,\n        y: 0,\n        z: 0.25\n      },\n      color: {\n        r: 0,\n        g: 0,\n        b: 255,\n        a: 1\n      }\n    }\n  },\n  points: {},\n  displayTfs: false,\n  displayGrid: true,\n  isPolar: false,\n  backgroundColor: \"#d0d0d0\",\n  planeColor: \"#a8a8a8\",\n  highlightColor: \"#ffffff\",\n  plane: 0,\n  fov: 90,\n  ar: false,\n  vr: false,\n  angle: Math.PI / 6,\n  length: 0.5,\n  scalarInputVal: 0.5,\n  rangeInputVal: [0.5, 1.5],\n  range: [0, 2],\n  onPointerMissed: () => console.log(\"Missed Click\")\n};\nMoreControls.parameters = {\n  ...MoreControls.parameters,\n  docs: {\n    ...MoreControls.parameters?.docs,\n    source: {\n      originalSource: \"args => {\\n  const {\\n    tfs,\\n    lines,\\n    texts,\\n    points,\\n    angle,\\n    length,\\n    rangeInputVal,\\n    scalarInputVal,\\n    range,\\n    ...otherArgs\\n  } = args;\\n  const [play, pause, reset] = useStore(state => [state.play, state.pause, state.reset]);\\n\\n  // Define changeable versions of the two range inputs\\n  const [scalarValue, setScalarValue] = useStore(state => [state.scalarValue, state.setScalarValue], shallow);\\n  const [rangeValue, setRangeValue] = useStore(state => [state.rangeValue, state.setRangeValue], shallow);\\n  const setRange = useStore(state => state.setRange, shallow);\\n  useEffect(() => {\\n    setScalarValue(scalarInputVal);\\n    setRangeValue(rangeInputVal);\\n    setRange(range);\\n    const hulls = {\\n      angleFeedback: getHullMesh(length, angle)\\n    };\\n    const items = {\\n      ...getScalarInputItems(range, scalarValue),\\n      ...getRangeInputItems(range, rangeValue)\\n    };\\n    useStore.setState({\\n      tfs,\\n      items,\\n      hulls,\\n      lines,\\n      texts,\\n      points\\n    });\\n  }, [tfs, lines, texts, points, angle, length, range, scalarInputVal, rangeInputVal]);\\n  return <ErrorBoundary FallbackComponent={ErrorFallback}>\\n      <div style={{\\n      height: \\\"calc(100vh - 3rem)\\\",\\n      width: \\\"calc(100vw - 2rem)\\\"\\n    }}>\\n        <Scene {...otherArgs} store={useStore} meshLookup={MeshLookupTable} />\\n        <div style={{\\n        textAlign: \\\"center\\\"\\n      }}>\\n          <button onClick={() => play()}>Play</button>\\n          <button onClick={() => play(0.5)}>Play (0.5x)</button>\\n          <button onClick={() => play(2)}>Play (2x)</button>\\n          <button onClick={() => pause()}>Pause</button>\\n          <button onClick={() => reset(0)}>Reset</button>\\n          <button onClick={() => reset(Math.PI / 2)}>Reset (0.25)</button>\\n          <button onClick={() => reset(Math.PI)}>Reset (0.5)</button>\\n          <button onClick={() => reset(3 * Math.PI / 2)}>Reset (0.75)</button>\\n        </div>\\n      </div>\\n    </ErrorBoundary>;\\n}\",\n      ...MoreControls.parameters?.docs?.source\n    }\n  }\n};"],"names":["MoreControls_stories","title","component","Scene","slice","set","get","api","SceneSlice","scalarValue","rangeValue","range","setScalarValue","newScalarValue","setRangeValue","newRangeValue","setRange","newRange","onMove","id","source","worldTransform","localTransform","state","includes","value","clamp","position","z","items","texts","inputText","Math","round","console","log","topRangeInputIndicator","bottomRangeInputIndicator","rangeInputRange","x","y","shapeParams","height","inputRangeText","rotation","quaternion","w","scale","useStore","create","immer","subscribeWithSelector","Template","args","tfs","lines","points","angle","length","rangeInputVal","scalarInputVal","otherArgs","play","pause","reset","shallow","useEffect","hulls","angleFeedback","getHullMesh","getScalarInputItems","getRangeInputItems","setState","ErrorBoundary","ErrorFallback","width","_jsx","MeshLookupTable","_jsxs","textAlign","PI","origin","Quaternion","eulerA","Euler","qA","clone","rotateTowards","setFromEuler","qB","centralVec","Vector3","vecA","applyQuaternion","vecB","map","a","sin","cos","frame","name","vertices","color","r","g","b","wireframe","rangeBounds","offset","scalarInputHousing","shape","radius","highlighted","scalarInputIndicator","transformMode","valueRange","zSphereTop","zSphereBottom","rangeHeight","rangeInputHousing","MoreControls","bind","movingFrame1","time","movingFrame2","displayTfs","displayGrid","isPolar","backgroundColor","planeColor","highlightColor","plane","fov","ar","vr","onPointerMissed","parameters","docs","originalSource"],"mappings":"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"}