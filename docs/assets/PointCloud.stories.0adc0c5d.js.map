{"version":3,"file":"PointCloud.stories.0adc0c5d.js","sources":["../../node_modules/three-stdlib/math/SimplexNoise.js","../../src/stories/PointCloud.stories.jsx"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\n\n// Ported from Stefan Gustavson's java implementation\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n// Read Stefan's excellent paper for details on how this code works.\n//\n// Sean McCullough banksean@gmail.com\n//\n// Added 4D noise\nclass SimplexNoise {\n  // To remove the need for index wrapping, double the permutation table length\n  // A lookup table to traverse the simplex around a given point in 4D.\n  // Details can be found where this table is used, in the 4D noise method.\n\n  /**\n   * You can pass in a random number generator object if you like.\n   * It is assumed to have a random() method.\n   */\n  constructor(r = Math) {\n    _defineProperty(this, \"grad3\", [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0], [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1], [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]]);\n\n    _defineProperty(this, \"grad4\", [[0, 1, 1, 1], [0, 1, 1, -1], [0, 1, -1, 1], [0, 1, -1, -1], [0, -1, 1, 1], [0, -1, 1, -1], [0, -1, -1, 1], [0, -1, -1, -1], [1, 0, 1, 1], [1, 0, 1, -1], [1, 0, -1, 1], [1, 0, -1, -1], [-1, 0, 1, 1], [-1, 0, 1, -1], [-1, 0, -1, 1], [-1, 0, -1, -1], [1, 1, 0, 1], [1, 1, 0, -1], [1, -1, 0, 1], [1, -1, 0, -1], [-1, 1, 0, 1], [-1, 1, 0, -1], [-1, -1, 0, 1], [-1, -1, 0, -1], [1, 1, 1, 0], [1, 1, -1, 0], [1, -1, 1, 0], [1, -1, -1, 0], [-1, 1, 1, 0], [-1, 1, -1, 0], [-1, -1, 1, 0], [-1, -1, -1, 0]]);\n\n    _defineProperty(this, \"p\", []);\n\n    _defineProperty(this, \"perm\", []);\n\n    _defineProperty(this, \"simplex\", [[0, 1, 2, 3], [0, 1, 3, 2], [0, 0, 0, 0], [0, 2, 3, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 3, 0], [0, 2, 1, 3], [0, 0, 0, 0], [0, 3, 1, 2], [0, 3, 2, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 3, 2, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 0, 3], [0, 0, 0, 0], [1, 3, 0, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 3, 0, 1], [2, 3, 1, 0], [1, 0, 2, 3], [1, 0, 3, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 3, 1], [0, 0, 0, 0], [2, 1, 3, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 1, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 0, 1, 2], [3, 0, 2, 1], [0, 0, 0, 0], [3, 1, 2, 0], [2, 1, 0, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 1, 0, 2], [0, 0, 0, 0], [3, 2, 0, 1], [3, 2, 1, 0]]);\n\n    _defineProperty(this, \"dot\", (g, x, y) => {\n      return g[0] * x + g[1] * y;\n    });\n\n    _defineProperty(this, \"dot3\", (g, x, y, z) => {\n      return g[0] * x + g[1] * y + g[2] * z;\n    });\n\n    _defineProperty(this, \"dot4\", (g, x, y, z, w) => {\n      return g[0] * x + g[1] * y + g[2] * z + g[3] * w;\n    });\n\n    _defineProperty(this, \"noise\", (xin, yin) => {\n      let n0;\n      let n1;\n      let n2; // Noise contributions from the three corners\n      // Skew the input space to determine which simplex cell we're in\n\n      const F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\n      const s = (xin + yin) * F2; // Hairy factor for 2D\n\n      const i = Math.floor(xin + s);\n      const j = Math.floor(yin + s);\n      const G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\n      const t = (i + j) * G2;\n      const X0 = i - t; // Unskew the cell origin back to (x,y) space\n\n      const Y0 = j - t;\n      const x0 = xin - X0; // The x,y distances from the cell origin\n\n      const y0 = yin - Y0; // For the 2D case, the simplex shape is an equilateral triangle.\n      // Determine which simplex we are in.\n      // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\n      let i1 = 0; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n      let j1 = 1;\n\n      if (x0 > y0) {\n        i1 = 1;\n        j1 = 0;\n      } // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n      // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n      // c = (3-sqrt(3))/6\n\n\n      const x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\n      const y1 = y0 - j1 + G2;\n      const x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n\n      const y2 = y0 - 1.0 + 2.0 * G2; // Work out the hashed gradient indices of the three simplex corners\n\n      const ii = i & 255;\n      const jj = j & 255;\n      const gi0 = this.perm[ii + this.perm[jj]] % 12;\n      const gi1 = this.perm[ii + i1 + this.perm[jj + j1]] % 12;\n      const gi2 = this.perm[ii + 1 + this.perm[jj + 1]] % 12; // Calculate the contribution from the three corners\n\n      let t0 = 0.5 - x0 * x0 - y0 * y0;\n\n      if (t0 < 0) {\n        n0 = 0.0;\n      } else {\n        t0 *= t0;\n        n0 = t0 * t0 * this.dot(this.grad3[gi0], x0, y0); // (x,y) of grad3 used for 2D gradient\n      }\n\n      let t1 = 0.5 - x1 * x1 - y1 * y1;\n\n      if (t1 < 0) {\n        n1 = 0.0;\n      } else {\n        t1 *= t1;\n        n1 = t1 * t1 * this.dot(this.grad3[gi1], x1, y1);\n      }\n\n      let t2 = 0.5 - x2 * x2 - y2 * y2;\n\n      if (t2 < 0) {\n        n2 = 0.0;\n      } else {\n        t2 *= t2;\n        n2 = t2 * t2 * this.dot(this.grad3[gi2], x2, y2);\n      } // Add contributions from each corner to get the final noise value.\n      // The result is scaled to return values in the interval [-1,1].\n\n\n      return 70.0 * (n0 + n1 + n2);\n    });\n\n    _defineProperty(this, \"noise3d\", (xin, yin, zin) => {\n      // Noise contributions from the four corners\n      let n0;\n      let n1;\n      let n2;\n      let n3; // Skew the input space to determine which simplex cell we're in\n\n      const F3 = 1.0 / 3.0;\n      const s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D\n\n      const i = Math.floor(xin + s);\n      const j = Math.floor(yin + s);\n      const k = Math.floor(zin + s);\n      const G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\n\n      const t = (i + j + k) * G3;\n      const X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n\n      const Y0 = j - t;\n      const Z0 = k - t;\n      const x0 = xin - X0; // The x,y,z distances from the cell origin\n\n      const y0 = yin - Y0;\n      const z0 = zin - Z0; // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n      // Determine which simplex we are in.\n\n      let i1;\n      let j1;\n      let k1; // Offsets for second corner of simplex in (i,j,k) coords\n\n      let i2;\n      let j2;\n      let k2; // Offsets for third corner of simplex in (i,j,k) coords\n\n      if (x0 >= y0) {\n        if (y0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0; // X Y Z order\n        } else if (x0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1; // X Z Y order\n        } else {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // Z X Y order\n\n      } else {\n        // x0<y0\n        if (y0 < z0) {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1; // Z Y X order\n        } else if (x0 < z0) {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1; // Y Z X order\n        } else {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // Y X Z order\n\n      } // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n      // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n      // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n      // c = 1/6.\n\n\n      const x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n\n      const y1 = y0 - j1 + G3;\n      const z1 = z0 - k1 + G3;\n      const x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n\n      const y2 = y0 - j2 + 2.0 * G3;\n      const z2 = z0 - k2 + 2.0 * G3;\n      const x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n\n      const y3 = y0 - 1.0 + 3.0 * G3;\n      const z3 = z0 - 1.0 + 3.0 * G3; // Work out the hashed gradient indices of the four simplex corners\n\n      const ii = i & 255;\n      const jj = j & 255;\n      const kk = k & 255;\n      const gi0 = this.perm[ii + this.perm[jj + this.perm[kk]]] % 12;\n      const gi1 = this.perm[ii + i1 + this.perm[jj + j1 + this.perm[kk + k1]]] % 12;\n      const gi2 = this.perm[ii + i2 + this.perm[jj + j2 + this.perm[kk + k2]]] % 12;\n      const gi3 = this.perm[ii + 1 + this.perm[jj + 1 + this.perm[kk + 1]]] % 12; // Calculate the contribution from the four corners\n\n      let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\n      if (t0 < 0) {\n        n0 = 0.0;\n      } else {\n        t0 *= t0;\n        n0 = t0 * t0 * this.dot3(this.grad3[gi0], x0, y0, z0);\n      }\n\n      let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\n      if (t1 < 0) {\n        n1 = 0.0;\n      } else {\n        t1 *= t1;\n        n1 = t1 * t1 * this.dot3(this.grad3[gi1], x1, y1, z1);\n      }\n\n      let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\n      if (t2 < 0) {\n        n2 = 0.0;\n      } else {\n        t2 *= t2;\n        n2 = t2 * t2 * this.dot3(this.grad3[gi2], x2, y2, z2);\n      }\n\n      let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\n      if (t3 < 0) {\n        n3 = 0.0;\n      } else {\n        t3 *= t3;\n        n3 = t3 * t3 * this.dot3(this.grad3[gi3], x3, y3, z3);\n      } // Add contributions from each corner to get the final noise value.\n      // The result is scaled to stay just inside [-1,1]\n\n\n      return 32.0 * (n0 + n1 + n2 + n3);\n    });\n\n    _defineProperty(this, \"noise4d\", (x, y, z, w) => {\n      // For faster and easier lookups\n      const grad4 = this.grad4;\n      const simplex = this.simplex;\n      const perm = this.perm; // The skewing and unskewing factors are hairy again for the 4D case\n\n      const F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\n      const G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n      let n0;\n      let n1;\n      let n2;\n      let n3;\n      let n4; // Noise contributions from the five corners\n      // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n\n      const s = (x + y + z + w) * F4; // Factor for 4D skewing\n\n      const i = Math.floor(x + s);\n      const j = Math.floor(y + s);\n      const k = Math.floor(z + s);\n      const l = Math.floor(w + s);\n      const t = (i + j + k + l) * G4; // Factor for 4D unskewing\n\n      const X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n\n      const Y0 = j - t;\n      const Z0 = k - t;\n      const W0 = l - t;\n      const x0 = x - X0; // The x,y,z,w distances from the cell origin\n\n      const y0 = y - Y0;\n      const z0 = z - Z0;\n      const w0 = w - W0; // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n      // To find out which of the 24 possible simplices we're in, we need to\n      // determine the magnitude ordering of x0, y0, z0 and w0.\n      // The method below is a good way of finding the ordering of x,y,z,w and\n      // then find the correct traversal order for the simplex we’re in.\n      // First, six pair-wise comparisons are performed between each possible pair\n      // of the four coordinates, and the results are used to add up binary bits\n      // for an integer index.\n\n      const c1 = x0 > y0 ? 32 : 0;\n      const c2 = x0 > z0 ? 16 : 0;\n      const c3 = y0 > z0 ? 8 : 0;\n      const c4 = x0 > w0 ? 4 : 0;\n      const c5 = y0 > w0 ? 2 : 0;\n      const c6 = z0 > w0 ? 1 : 0;\n      const c = c1 + c2 + c3 + c4 + c5 + c6; // The integer offsets for the second simplex corner\n\n      let i1;\n      let j1;\n      let k1;\n      let l1; // The integer offsets for the third simplex corner\n\n      let i2;\n      let j2;\n      let k2;\n      let l2; // The integer offsets for the fourth simplex corner\n\n      let i3;\n      let j3;\n      let k3;\n      let l3; // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n      // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n      // impossible. Only the 24 indices which have non-zero entries make any sense.\n      // We use a thresholding to set the coordinates in turn from the largest magnitude.\n      // The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n\n      i1 = simplex[c][0] >= 3 ? 1 : 0;\n      j1 = simplex[c][1] >= 3 ? 1 : 0;\n      k1 = simplex[c][2] >= 3 ? 1 : 0;\n      l1 = simplex[c][3] >= 3 ? 1 : 0; // The number 2 in the \"simplex\" array is at the second largest coordinate.\n\n      i2 = simplex[c][0] >= 2 ? 1 : 0;\n      j2 = simplex[c][1] >= 2 ? 1 : 0;\n      k2 = simplex[c][2] >= 2 ? 1 : 0;\n      l2 = simplex[c][3] >= 2 ? 1 : 0; // The number 1 in the \"simplex\" array is at the second smallest coordinate.\n\n      i3 = simplex[c][0] >= 1 ? 1 : 0;\n      j3 = simplex[c][1] >= 1 ? 1 : 0;\n      k3 = simplex[c][2] >= 1 ? 1 : 0;\n      l3 = simplex[c][3] >= 1 ? 1 : 0; // The fifth corner has all coordinate offsets = 1, so no need to look that up.\n\n      const x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n\n      const y1 = y0 - j1 + G4;\n      const z1 = z0 - k1 + G4;\n      const w1 = w0 - l1 + G4;\n      const x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n\n      const y2 = y0 - j2 + 2.0 * G4;\n      const z2 = z0 - k2 + 2.0 * G4;\n      const w2 = w0 - l2 + 2.0 * G4;\n      const x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n\n      const y3 = y0 - j3 + 3.0 * G4;\n      const z3 = z0 - k3 + 3.0 * G4;\n      const w3 = w0 - l3 + 3.0 * G4;\n      const x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n\n      const y4 = y0 - 1.0 + 4.0 * G4;\n      const z4 = z0 - 1.0 + 4.0 * G4;\n      const w4 = w0 - 1.0 + 4.0 * G4; // Work out the hashed gradient indices of the five simplex corners\n\n      const ii = i & 255;\n      const jj = j & 255;\n      const kk = k & 255;\n      const ll = l & 255;\n      const gi0 = perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32;\n      const gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32;\n      const gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32;\n      const gi3 = perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32;\n      const gi4 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32; // Calculate the contribution from the five corners\n\n      let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n\n      if (t0 < 0) {\n        n0 = 0.0;\n      } else {\n        t0 *= t0;\n        n0 = t0 * t0 * this.dot4(grad4[gi0], x0, y0, z0, w0);\n      }\n\n      let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n\n      if (t1 < 0) {\n        n1 = 0.0;\n      } else {\n        t1 *= t1;\n        n1 = t1 * t1 * this.dot4(grad4[gi1], x1, y1, z1, w1);\n      }\n\n      let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n\n      if (t2 < 0) {\n        n2 = 0.0;\n      } else {\n        t2 *= t2;\n        n2 = t2 * t2 * this.dot4(grad4[gi2], x2, y2, z2, w2);\n      }\n\n      let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n\n      if (t3 < 0) {\n        n3 = 0.0;\n      } else {\n        t3 *= t3;\n        n3 = t3 * t3 * this.dot4(grad4[gi3], x3, y3, z3, w3);\n      }\n\n      let t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n\n      if (t4 < 0) {\n        n4 = 0.0;\n      } else {\n        t4 *= t4;\n        n4 = t4 * t4 * this.dot4(grad4[gi4], x4, y4, z4, w4);\n      } // Sum up and scale the result to cover the range [-1,1]\n\n\n      return 27.0 * (n0 + n1 + n2 + n3 + n4);\n    });\n\n    for (let i = 0; i < 256; i++) {\n      this.p[i] = Math.floor(r.random() * 256);\n    }\n\n    for (let i = 0; i < 512; i++) {\n      this.perm[i] = this.p[i & 255];\n    }\n  }\n\n}\n\nexport { SimplexNoise };\n","import React, { useEffect } from \"react\";\nimport Scene from \"../components/Scene\";\nimport { useDefaultSceneStore } from \"../components\";\nimport { range } from \"lodash\";\nimport { SimplexNoise } from \"three-stdlib\";\nimport { MeshLookupTable } from \"./meshes/MeshLookup\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport ErrorFallback from \"./ErrorFallback\";\nexport default {\n  title: \"PointClouds\",\n  component: Scene\n};\nlet simplexNoise = new SimplexNoise();\nconst Template = args => {\n  const {\n    tfs,\n    items,\n    hulls,\n    lines,\n    texts,\n    points,\n    ...otherArgs\n  } = args;\n  useEffect(() => {\n    useDefaultSceneStore.setState({\n      tfs,\n      items,\n      hulls,\n      lines,\n      texts,\n      points\n    });\n  }, [tfs, items, hulls, lines, texts, points]);\n  return <ErrorBoundary FallbackComponent={ErrorFallback}>\n      <div style={{\n      height: \"calc(100vh - 2rem)\",\n      width: \"calc(100vw - 2rem)\"\n    }}>\n        <Scene {...otherArgs} store={useDefaultSceneStore} meshLookup={MeshLookupTable} />\n      </div>\n    </ErrorBoundary>;\n};\nexport const PointClouds = Template.bind({});\nPointClouds.args = {\n  tfs: {\n    movingFrame: {\n      frame: \"world\",\n      position: {\n        x: time => Math.cos(time / 1000),\n        y: time => Math.sin(time / 1000),\n        z: 0\n      },\n      rotation: {\n        w: 1,\n        x: 0,\n        y: 0,\n        z: 0\n      },\n      scale: {\n        x: 1,\n        y: 1,\n        z: 1\n      }\n    }\n  },\n  items: {},\n  lines: {},\n  hulls: {},\n  texts: {},\n  points: {\n    pointCloud: {\n      frame: \"movingFrame\",\n      scale: 1,\n      points: range(0, 5000).map(() => {\n        const seed1 = Math.random() * 5;\n        const seed2 = Math.random() * 5;\n        const seed3 = Math.random() * 5;\n        return {\n          position: {\n            x: t => seed1 - 2.5 + simplexNoise.noise(seed1 * 10, t / 1000),\n            y: t => seed2 - 2.5 + simplexNoise.noise(seed2 * 10, t / 1000),\n            z: t => seed3 - 2.5 + simplexNoise.noise(seed3 * 10, t / 1000)\n          },\n          color: {\n            r: Math.round(Math.random() * 255),\n            g: Math.round(Math.random() * 255),\n            b: Math.round(Math.random() * 255)\n          }\n        };\n      })\n    }\n  },\n  displayTfs: true,\n  displayGrid: true,\n  isPolar: false,\n  backgroundColor: \"#d0d0d0\",\n  planeColor: \"#a8a8a8\",\n  highlightColor: \"#ffffff\",\n  plane: -0.75,\n  fov: 60,\n  ar: false,\n  vr: false,\n  onPointerMissed: () => console.log(\"Missed Click\")\n};\nPointClouds.parameters = {\n  ...PointClouds.parameters,\n  docs: {\n    ...PointClouds.parameters?.docs,\n    source: {\n      originalSource: \"args => {\\n  const {\\n    tfs,\\n    items,\\n    hulls,\\n    lines,\\n    texts,\\n    points,\\n    ...otherArgs\\n  } = args;\\n  useEffect(() => {\\n    useDefaultSceneStore.setState({\\n      tfs,\\n      items,\\n      hulls,\\n      lines,\\n      texts,\\n      points\\n    });\\n  }, [tfs, items, hulls, lines, texts, points]);\\n  return <ErrorBoundary FallbackComponent={ErrorFallback}>\\n      <div style={{\\n      height: \\\"calc(100vh - 2rem)\\\",\\n      width: \\\"calc(100vw - 2rem)\\\"\\n    }}>\\n        <Scene {...otherArgs} store={useDefaultSceneStore} meshLookup={MeshLookupTable} />\\n      </div>\\n    </ErrorBoundary>;\\n}\",\n      ...PointClouds.parameters?.docs?.source\n    }\n  }\n};"],"names":["SimplexNoise","r","_defineProperty","g","x","y","z","w","xin","yin","n0","n1","n2","F2","i","j","G2","t","X0","Y0","x0","y0","i1","j1","x1","y1","x2","y2","ii","jj","gi0","gi1","gi2","t0","t1","t2","zin","n3","F3","s","k","G3","Z0","z0","k1","i2","j2","k2","z1","z2","x3","y3","z3","kk","gi3","t3","grad4","simplex","perm","F4","G4","n4","l","W0","w0","c1","c2","c3","c4","c5","c6","c","l1","l2","i3","j3","k3","l3","w1","w2","w3","x4","y4","z4","w4","ll","gi4","t4","PointCloud_stories","title","component","Scene","simplexNoise","Template","args","tfs","items","hulls","lines","texts","points","otherArgs","useEffect","useDefaultSceneStore","setState","ErrorBoundary","ErrorFallback","height","width","MeshLookupTable","PointClouds","bind","movingFrame","frame","position","time","Math","cos","sin","rotation","scale","pointCloud","range","map","seed1","random","seed2","seed3","noise","color","round","b","displayTfs","displayGrid","isPolar","backgroundColor","planeColor","highlightColor","plane","fov","ar","vr","onPointerMissed","console","log","parameters","docs","source","originalSource"],"mappings":"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"}