{"version":3,"file":"TFMovement.stories.f2a1128c.js","sources":["../../src/stories/TFMovement.stories.jsx"],"sourcesContent":["import React, { useLayoutEffect, useState } from 'react';\nimport Scene from '../components/Scene';\nimport { useDefaultSceneStore } from '../components';\nexport default {\n  title: 'TFMovement',\n  component: Scene\n};\nconst Template = args => {\n  const {\n    tfs,\n    items,\n    hulls,\n    lines,\n    texts,\n    ...otherArgs\n  } = args;\n  const setProperty = useDefaultSceneStore(state => state.setProperty);\n  const [translateSnap, setTranslateSnap] = useState(0);\n  const [rotateSnap, setRotateSnap] = useState(0);\n  const [scaleSnap, setScaleSnap] = useState(0);\n  useLayoutEffect(() => {\n    useDefaultSceneStore.setState({\n      tfs,\n      items,\n      hulls,\n      lines,\n      texts\n    });\n  }, [tfs, items, hulls, lines, texts]);\n  return <div style={{\n    height: 'calc(100vh - 3rem)',\n    width: 'calc(100vw - 2rem)'\n  }}>\n            <Scene {...otherArgs} store={useDefaultSceneStore} displayTfs translateSnap={translateSnap} rotateSnap={rotateSnap} scaleSnap={scaleSnap} />\n            <div style={{\n      textAlign: 'center'\n    }}>\n                <button onClick={() => {\n        setTranslateSnap(0);\n        setProperty(['tfs', 'moving', 'transformMode'], 'translate');\n      }}>Translate Free</button>\n                <button onClick={() => {\n        setTranslateSnap(0.25);\n        setProperty(['tfs', 'moving', 'transformMode'], 'translate');\n      }}>Translate Snapping</button>\n                <button onClick={() => {\n        setRotateSnap(0);\n        setProperty(['tfs', 'moving', 'transformMode'], 'rotate');\n      }}>Rotate Free</button>\n                <button onClick={() => {\n        setRotateSnap(Math.PI / 6);\n        setProperty(['tfs', 'moving', 'transformMode'], 'rotate');\n      }}>Rotate Snapping</button>\n                <button onClick={() => {\n        setScaleSnap(0);\n        setProperty(['tfs', 'moving', 'transformMode'], 'scale');\n      }}>Scale Free</button>\n                <button onClick={() => {\n        setScaleSnap(0.1);\n        setProperty(['tfs', 'moving', 'transformMode'], 'scale');\n      }}>Scale Snapping</button>\n            </div>\n        </div>;\n};\nexport const TFMovement = Template.bind({});\nTFMovement.storyName = \"TFMovement\";\nTFMovement.args = {\n  tfs: {\n    moving: {\n      frame: 'world',\n      // position: { x: (time => Math.cos(time / 1000)), y: (time) => Math.sin(time / 1000), z: 0 },\n      position: {\n        x: 0,\n        y: 0,\n        z: 0\n      },\n      rotation: {\n        w: 1,\n        x: 0,\n        y: 0,\n        z: 0\n      },\n      scale: {\n        x: 1,\n        y: 1,\n        z: 1\n      },\n      transformMode: 'rotate'\n    }\n  },\n  items: {\n    immovable: {\n      shape: \"cube\",\n      name: \"Immovable Cube\",\n      frame: \"moving\",\n      position: {\n        x: 0,\n        y: 0,\n        z: 1\n      },\n      rotation: {\n        w: 1,\n        x: 0,\n        y: 0,\n        z: 0\n      },\n      color: {\n        r: 255,\n        g: 10,\n        b: 10,\n        a: 1\n      },\n      scale: {\n        x: 0.5,\n        y: 0.5,\n        z: 0.5\n      }\n    },\n    translateCube: {\n      shape: \"cube\",\n      name: \"Translate Cube (Async)\",\n      frame: \"moving\",\n      position: {\n        x: 1,\n        y: 1,\n        z: 1\n      },\n      rotation: {\n        w: 1,\n        x: 0,\n        y: 0,\n        z: 0\n      },\n      color: {\n        r: 10,\n        g: 10,\n        b: 10,\n        a: 1\n      },\n      scale: {\n        x: 0.5,\n        y: 0.5,\n        z: 0.5\n      },\n      highlighted: false\n    },\n    rotateCube: {\n      shape: \"cube\",\n      name: \"Rotate Cube\",\n      frame: \"moving\",\n      position: {\n        x: 1,\n        y: 0,\n        z: 1\n      },\n      rotation: {\n        w: 1,\n        x: 0,\n        y: 0,\n        z: 0\n      },\n      color: {\n        r: 10,\n        g: 255,\n        b: 10,\n        a: 1\n      },\n      scale: {\n        x: 0.5,\n        y: 0.5,\n        z: 0.5\n      },\n      highlighted: false\n    },\n    scaleCube: {\n      shape: \"cube\",\n      name: \"Scale Cube\",\n      frame: \"moving\",\n      position: {\n        x: 0,\n        y: 1,\n        z: 1\n      },\n      rotation: {\n        w: 1,\n        x: 0,\n        y: 0,\n        z: 0\n      },\n      color: {\n        r: 10,\n        g: 10,\n        b: 255,\n        a: 1\n      },\n      scale: {\n        x: 0.5,\n        y: 0.5,\n        z: 0.5\n      },\n      highlighted: false\n    }\n  },\n  lines: {},\n  hulls: {},\n  texts: {},\n  displayTfs: false,\n  displayGrid: true,\n  isPolar: false,\n  backgroundColor: '#d0d0d0',\n  planeColor: '#a8a8a8',\n  highlightColor: '#ffffff',\n  plane: -0.75,\n  fov: 60,\n  paused: false,\n  ar: false,\n  vr: false,\n  onPointerMissed: () => console.log('Missed Click')\n};\nTFMovement.parameters = {\n  ...TFMovement.parameters,\n  storySource: {\n    source: \"args => {\\n  const {\\n    tfs,\\n    items,\\n    hulls,\\n    lines,\\n    texts,\\n    ...otherArgs\\n  } = args;\\n  const setProperty = useDefaultSceneStore(state => state.setProperty);\\n  const [translateSnap, setTranslateSnap] = useState(0);\\n  const [rotateSnap, setRotateSnap] = useState(0);\\n  const [scaleSnap, setScaleSnap] = useState(0);\\n  useLayoutEffect(() => {\\n    useDefaultSceneStore.setState({\\n      tfs,\\n      items,\\n      hulls,\\n      lines,\\n      texts\\n    });\\n  }, [tfs, items, hulls, lines, texts]);\\n  return <div style={{\\n    height: 'calc(100vh - 3rem)',\\n    width: 'calc(100vw - 2rem)'\\n  }}>\\n            <Scene {...otherArgs} store={useDefaultSceneStore} displayTfs translateSnap={translateSnap} rotateSnap={rotateSnap} scaleSnap={scaleSnap} />\\n            <div style={{\\n      textAlign: 'center'\\n    }}>\\n                <button onClick={() => {\\n        setTranslateSnap(0);\\n        setProperty(['tfs', 'moving', 'transformMode'], 'translate');\\n      }}>Translate Free</button>\\n                <button onClick={() => {\\n        setTranslateSnap(0.25);\\n        setProperty(['tfs', 'moving', 'transformMode'], 'translate');\\n      }}>Translate Snapping</button>\\n                <button onClick={() => {\\n        setRotateSnap(0);\\n        setProperty(['tfs', 'moving', 'transformMode'], 'rotate');\\n      }}>Rotate Free</button>\\n                <button onClick={() => {\\n        setRotateSnap(Math.PI / 6);\\n        setProperty(['tfs', 'moving', 'transformMode'], 'rotate');\\n      }}>Rotate Snapping</button>\\n                <button onClick={() => {\\n        setScaleSnap(0);\\n        setProperty(['tfs', 'moving', 'transformMode'], 'scale');\\n      }}>Scale Free</button>\\n                <button onClick={() => {\\n        setScaleSnap(0.1);\\n        setProperty(['tfs', 'moving', 'transformMode'], 'scale');\\n      }}>Scale Snapping</button>\\n            </div>\\n        </div>;\\n}\",\n    ...TFMovement.parameters?.storySource\n  }\n};"],"names":["TFMovement_stories","title","component","Scene","Template","args","tfs","items","hulls","lines","texts","otherArgs","setProperty","useDefaultSceneStore","state","translateSnap","setTranslateSnap","useState","rotateSnap","setRotateSnap","scaleSnap","setScaleSnap","useLayoutEffect","setState","height","width","_jsx","_jsxs","textAlign","Math","PI","TFMovement","bind","storyName","moving","frame","position","x","y","z","rotation","w","scale","transformMode","immovable","shape","name","color","r","g","b","a","translateCube","highlighted","rotateCube","scaleCube","displayTfs","displayGrid","isPolar","backgroundColor","planeColor","highlightColor","plane","fov","paused","ar","vr","onPointerMissed","console","log","parameters","storySource","source"],"mappings":"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"}